{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install pyspark\n","!pip install findspark"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eV1PywNlNc6M","executionInfo":{"status":"ok","timestamp":1753809648628,"user_tz":-420,"elapsed":23714,"user":{"displayName":"Thảo Vũ Thanh","userId":"16764066744980850621"}},"outputId":"40499ad7-dae6-4b43-f06a-1ec9e19f66c8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pyspark in /usr/local/lib/python3.11/dist-packages (3.5.1)\n","Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.11/dist-packages (from pyspark) (0.10.9.7)\n","Requirement already satisfied: findspark in /usr/local/lib/python3.11/dist-packages (2.0.1)\n"]}]},{"cell_type":"code","source":["import findspark\n","findspark.init()\n","\n","from pyspark.sql import SparkSession\n","\n","spark = SparkSession.builder.appName(\"Processing and ML\").getOrCreate()\n","\n","spark"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":219},"id":"x5x1Bg5jNew1","executionInfo":{"status":"ok","timestamp":1753809666832,"user_tz":-420,"elapsed":18207,"user":{"displayName":"Thảo Vũ Thanh","userId":"16764066744980850621"}},"outputId":"c7581c7a-142a-4971-c321-efc5c4173620"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<pyspark.sql.session.SparkSession at 0x7ff66f271fd0>"],"text/html":["\n","            <div>\n","                <p><b>SparkSession - in-memory</b></p>\n","                \n","        <div>\n","            <p><b>SparkContext</b></p>\n","\n","            <p><a href=\"http://c995a2b39414:4040\">Spark UI</a></p>\n","\n","            <dl>\n","              <dt>Version</dt>\n","                <dd><code>v3.5.1</code></dd>\n","              <dt>Master</dt>\n","                <dd><code>local[*]</code></dd>\n","              <dt>AppName</dt>\n","                <dd><code>Processing and ML</code></dd>\n","            </dl>\n","        </div>\n","        \n","            </div>\n","        "]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["from google.colab import drive # kết nối lên drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gRDGv9qvNmGh","executionInfo":{"status":"ok","timestamp":1753809668376,"user_tz":-420,"elapsed":1532,"user":{"displayName":"Thảo Vũ Thanh","userId":"16764066744980850621"}},"outputId":"16df868b-1e43-4d7c-d781-b1f7e58d62bc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","df = pd.read_parquet(\"/content/drive/MyDrive/CAPSTONE PROJECT - TEAM 3 /ML/tien_xu_ly_jobs.parquet\")\n","df = spark.createDataFrame(df)"],"metadata":{"id":"gBtr_I_rNoiu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Hiển thị schema ban đầu để kiểm tra\n","print(\"Schema ban đầu:\")\n","df.printSchema()\n","\n","# Hiển thị vài dòng đầu để xem dữ liệu\n","print(\"\\nDữ liệu ban đầu:\")\n","df.show(5, truncate=False)\n","\n","print(\"Số dòng ban đầu:\", df.count())"],"metadata":{"id":"svJeTMQeNx28"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Loại những dữ liệu bị rỗng của mô tả & yêu cầu ở tiền xử lý"],"metadata":{"id":"Pjvn0vNOS7Wl"}},{"cell_type":"code","source":["from pyspark.sql.functions import col\n","# File trước tiền xử lý đã biết trong cột mo_ta và yeu_cau có giá trị nan\n","df_clean = df.filter(\n","    (col('mo_ta_cong_viec_en').isNotNull()) &\n","    (~(col('mo_ta_cong_viec_en').rlike('(?i)^nan$'))) &\n","    (col('yeu_cau_cong_viec_en').isNotNull()) &\n","    (~(col('yeu_cau_cong_viec_en').rlike('(?i)^nan$')))\n",")\n","print(\"Số dòng sau khi loại bỏ:\", df_clean.count())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hsitEBl0OL-8","executionInfo":{"status":"ok","timestamp":1753809689777,"user_tz":-420,"elapsed":9799,"user":{"displayName":"Thảo Vũ Thanh","userId":"16764066744980850621"}},"outputId":"3c76871e-8433-4be6-ed10-93595769a995"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Số dòng sau khi loại bỏ: 9663\n"]}]},{"cell_type":"code","source":["print(df_clean.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cxBUbL3eLoUz","executionInfo":{"status":"ok","timestamp":1753809339238,"user_tz":-420,"elapsed":12,"user":{"displayName":"Thảo Vũ Thanh","userId":"16764066744980850621"}},"outputId":"0021539b-1911-41b8-9863-20c0d8977157"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['ten_cong_viec', 'khu_vuc', 'ngay_dang_clean', 'ngay_dang_date', 'link', 'cap_bac_standardized', 'cap_bac_code', 'exp_year', 'kinh_nghiem_group', 'nganh_nghe_clean', 'mo_ta_cong_viec_clean', 'yeu_cau_cong_viec_clean', 'yeu_cau_cong_viec_en', 'mo_ta_cong_viec_en']\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from pyspark.sql.functions import col, concat_ws\n","\n","df_clean = df_clean.withColumn(\n","    \"ky_nang_combined\",\n","    concat_ws(\" \", col(\"mo_ta_cong_viec_en\"), col(\"yeu_cau_cong_viec_en\"))\n",")\n","\n","df_final = df_clean.select(\n","    \"ten_cong_viec\",\n","    \"link\",\n","    \"khu_vuc\",\n","    \"cap_bac_standardized\",\n","    \"cap_bac_code\",\n","    \"nganh_nghe_clean\",\n","    \"exp_year\",\n","    \"ky_nang_combined\",\n",")\n","\n","# Đường dẫn lưu file Excel\n","output_path_xlsx = \"/content/drive/MyDrive/jobs_clean.xlsx\"\n","df_final_pandas = df_final.toPandas()\n","df_final_pandas.to_excel(output_path_xlsx, index=False)\n","print(f\"Đã lưu DataFrame sạch vào: {output_path_xlsx}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ktRWLRksIzCY","executionInfo":{"status":"ok","timestamp":1753809699320,"user_tz":-420,"elapsed":9541,"user":{"displayName":"Thảo Vũ Thanh","userId":"16764066744980850621"}},"outputId":"a479bc87-f87e-4611-fa19-6413dc99fc8c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Đã lưu DataFrame sạch vào: /content/drive/MyDrive/jobs_clean.xlsx\n"]}]},{"cell_type":"code","source":["# Đường dẫn lưu file parquet\n","output_path = \"/content/drive/MyDrive/GoogleColab/jobs_clean.parquet\"\n","\n","# Lưu DataFrame df_clean dưới dạng Parquet\n","df_clean.write.mode(\"overwrite\").parquet(output_path)\n","\n","print(f\"Đã lưu DataFrame sạch vào: {output_path}\")"],"metadata":{"id":"aeXwyA5g0y3M"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","df = df_clean.toPandas()\n","df.info()"],"metadata":{"id":"txwlileYXoi4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"IWsquuFSNxCN"}},{"cell_type":"markdown","source":["#Quy về ngành nghề chung"],"metadata":{"id":"wZgbAsx_dp4U"}},{"cell_type":"code","source":["import joblib, os"],"metadata":{"id":"203cxWL8cJv-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["  nganh_mapping = {\n","    'Kỹ thuật, Sản xuất & Công nghiệp': [\n","        'cơ khí', 'ô tô', 'điện', 'điện công nghiệp', 'điện lạnh', 'điện tử','tự động hóa',\n","        'sản xuất', 'vận hành sản xuất','bảo trì', 'sửa chữa','dệt may',\n","        'da giày', 'hóa học', 'vật tư', 'dầu khí','hóa mỹ phẩm','khoáng sản'],\n","    'Công trình – xây dựng – quy hoạch':[\n","        'trắc địa', 'xây dựng', 'xây dựng > phát triển dự án',\n","        'xây dựng > quản lý dự án', 'xây dựng > xây dựng', 'kiến trúc', 'xây dựng > thiết kế kiến trúc',\n","        'thiết kế', 'xây dựng > thiết kế nội thất', 'xây dựng > thiết kế & quy hoạch đô thị','quy hoạch & quy định'\n","    ],\n","    'Kinh tế - Tài chính - Kinh doanh': [\n","        'kinh doanh', 'phát triển kinh doanh','chứng khoán', 'ngân hàng', 'tài chính', 'đầu tư',\n","        'kiểm toán', 'kiểm toán > kiểm soát viên tài chính', 'kiểm toán > kiểm toán',\n","        'kiểm toán > kế hoạch', 'kiểm toán > kế toán chi phí', 'kiểm toán > kế toán công nợ',\n","        'kiểm toán > kế toán doanh thu', 'kiểm toán > kế toán quản trị',\n","        'kiểm toán > kế toán thanh toán', 'kiểm toán > kế toán thuế',\n","        'kiểm toán > kế toán tài chính', 'kiểm toán > kế toán tổng hợp','kế toán','thu mua','tư vấn doanh nghiệp',\n","        'thương mại điện tử','bảo hiểm'\n","        ],\n","    'Hành chính - Luật - Quản lý':[\n","        'hành chính', 'nhân sự', 'thư ký', 'thư viện','luật', 'pháp lý','qc', 'qc)', 'quản lý chất lượng (qa',\n","        'quản lý điều hành','thống kê'\n","    ],\n","    'Giáo dục - Đào tạo - Tư vấn':[\n","        'giáo dục', 'đào tạo','tư vấn','tư vấn doanh nghiệp','thực tập','mới tốt nghiệp'\n","    ],\n","    'Y tế - Chăm sóc sức khỏe':[\n","        'y tế','công nghệ sinh học', 'dược phẩm','chăm sóc cá nhân', 'chăm sóc sức khỏe'\n","    ],\n","    'Nông nghiệp - Thủy sản - Môi trường':[\n","        'chăn nuôi', 'ngư nghiệp', 'nông', 'nông nghiệp', 'ngư nghiệp > nông',\n","         'lâm','lâm nghiệp','môi trường','thú y', 'thủy lợi', 'thủy sản','hải sản', 'địa chất'\n","    ],\n","    'Bán lẻ - Dịch vụ khách hàng - Thương mại':[\n","        'bán hàng', 'bán lẻ', 'bán sỉ', 'kinh doanh > bán hàng', 'kinh doanh > bán hàng qua điện thoại',\n","        'bán hàng kỹ thuật', 'kinh doanh > bán hàng kỹ thuật','dịch vụ khách hàng', 'hàng gia dụng'\n","    ],\n","    'Bất động sản - Nhà đất - Nội thất':[\n","        'bất động sản','nội ngoại thất','đồ gỗ','họa viên kiến trúc'\n","    ],\n","    'Công nghệ thông tin & Khoa học dữ liệu': [\n","        'ai','cloud', 'help desk', 'phân tích hệ thống', 'mạng',\n","        'cntt - phần mềm', 'cntt - phần cứng', 'công nghệ thông tin',\n","        'viễn thông > phần mềm máy tính', 'viễn thông > bảo mật công nghệ thông tin',\n","        'viễn thông > quản lý công nghệ thông tin', 'viễn thông > quản lý dự án công nghệ',\n","        'viễn thông > quản trị cơ sở dữ liệu', 'viễn thông > system', 'viễn thông > ux',\n","        'viễn thông > chuyển đổi số', 'viễn thông > it support', 'viễn thông > phân tích kinh doanh',\n","        'viễn thông > data engineer', 'viễn thông > qa',\n","        'data analyst', 'devops engineer', 'software testing', 'ui design',\n","        'viễn thông > phần cứng máy tính','viễn thông > viễn thông'\n","    ],\n","    'Du lịch - Nhà hàng - Khách sạn - Sự kiện': [\n","        'du lịch', 'khách sạn', 'nhà hàng', 'tổ chức sự kiện'\n","    ],\n","    'Mỹ thuật - Truyền thông - Văn hóa': [\n","        'biên tập','nhiếp ảnh', 'mỹ thuật', 'nghệ thuật','xuất bản', 'xuất bản > đạo diễn nghệ thuật',\n","        'thời trang', 'làm đẹp', 'thẩm mỹ', 'giải trí', 'báo chí','in ấn', 'xuất bản > in ấn & xuất bản','xuất bản > sản xuất chương trình',\n","    ],\n","    'Giao thông - Vận tải - Xuất nhập khẩu':[\n","        'kho vận', 'giao nhận', 'vận chuyển','xuất nhập khẩu', 'đấu thầu', 'hàng không', 'hàng hải', 'bưu chính viễn thông'\n","    ],\n","    'An ninh - Lao động - Chính phủ': [\n","        'an ninh','bảo vệ', 'lao động phổ thông','an toàn lao động', 'xây dựng > an toàn lao động','chính phủ'\n","    ],\n","    'Ngoại ngữ - Phi lợi nhuận - Đối ngoại': [\n","        'biên phiên dịch','phi chính phủ', 'phi lợi nhuận', 'phi lợi nhuận > chính sách', 'phi lợi nhuận > ngo',\n","        'đối ngoại'\n","    ],\n","    'Công nghệ thực phẩm & dinh dưỡng': ['công nghệ thực phẩm', 'dinh dưỡng', 'thực phẩm & đồ uống'],\n","    'Marketing': ['marketing', 'tiếp thị', 'tiếp thị trực tuyến', 'quảng cáo', 'truyền thông', 'truyền hình'],\n","    'Ngành khác': ['ngành khác'],\n","    }"],"metadata":{"id":"KHft6q7os1YL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Xử lý nganh nghe = MultiLabelBinarizer => OHE\n"],"metadata":{"id":"mLnbxwY0XNNj"}},{"cell_type":"code","source":["from sklearn.preprocessing import MultiLabelBinarizer\n","import pandas as pd\n","\n","def standardize_nganh(df: pd.DataFrame, nganh_mapping: dict, mlb_path: str):\n","    \"\"\"\n","    Chuẩn hóa cột ngành nghề theo mapping & lưu hoặc load MultiLabelBinarizer.\n","    Trả về dữ liệu đã được OHE ngành nghề.\n","    \"\"\"\n","    # Xây dict ánh xạ đơn giản từ từng tag về nhóm ngành\n","    tag_to_group = {}\n","    for group, tags in nganh_mapping.items():\n","        for tag in tags:\n","            tag_to_group[tag.lower().strip()] = group # chuyển thành chữ thường cho đồng nhất\n","\n","    # ánh xạ từng tag trong list về nhóm ngành chính\n","    def standardize_nganh_nghe(tags):\n","        result = []\n","        for tag in tags:\n","            tag_lower = tag.lower()\n","            # nếu không có trong mapping giữ nguyên tag gốc\n","            group = tag_to_group.get(tag_lower, tag)\n","            result.append(group)\n","        return list(set(result)) # loại trùng nếu muốn\n","\n","    df['nganh_nghe_clean_list'] = df['nganh_nghe_clean'].apply(\n","        lambda x: [tag.strip() for tag in x.split(',')] if isinstance(x, str) else []\n","    )\n","    df['nganh_nghe_chuan_hoa'] = df['nganh_nghe_clean_list'].apply(standardize_nganh_nghe)\n","\n","    if os.path.exists(mlb_path):\n","        mlb_nganh_nghe = joblib.load(mlb_path)\n","    else:\n","        from sklearn.preprocessing import MultiLabelBinarizer\n","        mlb_nganh_nghe = MultiLabelBinarizer()\n","        mlb_nganh_nghe.fit(df['nganh_nghe_chuan_hoa'])\n","        joblib.dump(mlb_nganh_nghe, mlb_path)\n","\n","#Chuyển sang OHE: vecto 0/1\n","\"\"\"\n","mlb_nganh_nghe.classes_: ['CNTT', 'Giáo dục', 'Kỹ thuật', 'Ngân hàng', 'Xây dựng']\n","Một dòng dữ liệu có ngành: ['Kỹ thuật','Xây dựng']\n","\n","\n","\"\"\"\n","    nganh_OHE = mlb_nganh_nghe.transform(df['nganh_nghe_chuan_hoa'])\n","    nganh_OHE_df = pd.DataFrame(nganh_OHE, columns=[f'nganh_{c}' for c in mlb_nganh_nghe.classes_])\n","    df = pd.concat([df.reset_index(drop=True), nganh_OHE_df.reset_index(drop=True)], axis=1)\n","    return df, mlb_nganh_nghe\n","#thì vecto trả về: [0, 0, 1, 0, 1]"],"metadata":{"id":"wQsvrFAjlugw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"jluH_Y0s9VMG"}},{"cell_type":"markdown","source":["#Xử lý văn bản mô tả & yêu cầu\n"],"metadata":{"id":"3F9z4qtVY6ca"}},{"cell_type":"code","source":["from pyspark.ml import Pipeline\n","from pyspark.ml.feature import CountVectorizer,StringIndexer, OneHotEncoder, Tokenizer, StopWordsRemover, HashingTF, IDF, VectorAssembler, StandardScaler\n","from pyspark.ml.feature import Word2Vec\n","from pyspark.sql.functions import split, col, udf, concat_ws\n","from pyspark.sql.types import ArrayType, StringType\n","from pyspark.ml import Pipeline\n","\n","def feature_spark_dataframe(df: pd.DataFrame) -> 'pd.DataFrame':\n","    \"\"\"\n","    Chuyển df Pandas -> Spark, xử lý văn bản -> vector features với pipeline, trả về df Spark đã có feature.\n","    Pipeline nên fit ở train, và save/load dùng lại cho test hoặc user input mới.\n","    \"\"\"\n","    df_spark = spark.createDataFrame(df)\n","    df_spark = df_spark.fillna({'mo_ta_cong_viec_en': '', 'yeu_cau_cong_viec_en': ''})\n","    df_spark = df_spark.withColumn(\"ky_nang_combined\", concat_ws(\" \", col(\"mo_ta_cong_viec_en\"), col(\"yeu_cau_cong_viec_en\")))\n","    return df_spark\n","\n","# Xây dựng Pipeline NLP(ngôn ngữ tự nhiên) với Spark MLlib\n","# Biến văn bản thành vector số thông qua:\n","# Tokenizer → StopWordsRemover → Word2Vec → VectorAssembler\n","def build_text_pipeline():\n","  # Tokenizer: tách câu văn bản thành các từ (tokens), tạo cột text_words.\n","    tokenizer = Tokenizer(inputCol=\"ky_nang_combined\", outputCol=\"ky_nang_words\")\n","  # StopWordsRemover: loại bỏ các từ dừng (vd: “and”, “the”, ...) khỏi danh sách từ text_words, tạo cột text_filtered.\n","    stopwords_remover = StopWordsRemover(inputCol=\"ky_nang_words\", outputCol=\"ky_nang_filtered\")\n","  # Word2Vec: tạo vector embedding ngữ nghĩa (kích thước vector 100) dựa trên text_filtered.\n","    \"\"\"\n","    vectorSize=100: mỗi vector có 100 chiều\n","    minCount=5: chỉ giữ từ xuất hiện ≥ 5 lần → loại bỏ từ hiếm\n","    inputCol=\"text_filtered\": cột đầu vào\n","    outputCol=\"text_w2v\": cột đầu ra\n","    \"\"\"\n","    word2vec = Word2Vec(vectorSize=100, minCount=5, inputCol=\"ky_nang_filtered\", outputCol=\"ky_nang_w2v\")\n","  #VectorAssembler: nối text_w2v thành vector cuối cùng features dùng cho mô hình.\n","    assembler = VectorAssembler(inputCols=[\"ky_nang_w2v\"], outputCol=\"ky_nang_features\")\n","\n","    return Pipeline(stages=[tokenizer, stopwords_remover, word2vec, assembler])\n","\n","#Output: ky_nang_features chính là vector kỹ năng đầu vào cho mô hình"],"metadata":{"id":"_TpiT40InIsE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Thực thi\n","1. Đọc dữ liệu sạch\n","\n","2. Chuẩn hóa ngành nghề → One-Hot\n","\n","3. Xử lý kỹ năng mô tả tuyển dụng → vector hóa bằng NLP\n","\n","4. Lưu lại mô hình xử lý văn bản để dùng cho dữ liệu test hoặc input từ người dùng sau này"],"metadata":{"id":"yWPVDO5SZEee"}},{"cell_type":"code","source":["import pandas as pd\n","df_pd = pd.read_parquet(\"/content/drive/MyDrive/GoogleColab/jobs_clean.parquet\")\n","\n","# 1. Chuẩn hóa ngành nghề\n","df_ohe_pandas, mlb_nganh_nghe = standardize_nganh(df_pd, nganh_mapping, \"/content/drive/MyDrive/GoogleColab/mlb_nganh_nghe.pkl\")\n","\n","# 2. Chuyển sang Spark DataFrame, tạo cột kết hợp text\n","df_spark = feature_spark_dataframe(df_ohe_pandas)\n","\n","# 3. Xây pipeline text ky_nang_combined\n","pipeline = build_text_pipeline()\n","\n","# 4. Fit pipeline trên dữ liệu huấn luyện\n","pipeline_model = pipeline.fit(df_spark)\n","\n","# 5. Transform dữ liệu thành vector features\n","#Biến văn bản trong ky_nang_combined → vector số trong ky_nang_features\n","df_transformed = pipeline_model.transform(df_spark)\n","\n","# 6. Hiển thị kết quả\n","df_transformed.select(\"ky_nang_features\").show(truncate=False)\n","\n","# 7. Lưu lại pipeline đã huấn luyện Word2Vec (để tái sử dụng cho test hoặc user input)\n","pipeline_model.save(\"/content/drive/MyDrive/GoogleColab/pipeline_model_spark\")"],"metadata":{"id":"2FSZqsIjq6iB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Khi cần tải lại để sử dụng:\n","#TH1: Pipeline với scikit-learn + Pandas\n","#xây pipeline bằng scikit-learn (dùng Pipeline, CountVectorizer, TfidfVectorizer, OneHotEncoder, ...)\n","#loaded_pipeline_model = joblib.load(\"/content/drive/MyDrive/pipeline_model.pkl\")\n","# Áp dụng transform trên dữ liệu mới\n","#df_new_transformed = loaded_pipeline_model.transform(df_new)\n","#df_new_transformed.select(\"features\").show(truncate=False)\n","\n","#Tái sử dụng với PYspark: ví dụ: Tokenizer, StopWordsRemover, Word2Vec, VectorAssembler\n","#from pyspark.ml import PipelineModel\n","#loaded_pipeline_model = PipelineModel.load(\"/content/drive/MyDrive/pipeline_model_spark\")\n","#df_new_transformed = loaded_pipeline_model.transform(df_new_spark)\n","#df_new_transformed.select(\"ky_nang_features\").show(truncate=False)"],"metadata":{"id":"vY3cRVq3g09r"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(list(df_transformed.columns))"],"metadata":{"id":"0GGIec-XtC2y"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#GỘP DATAFRAME CHO VÀO HUẤN LUYỆN"],"metadata":{"id":"Ts_KOQLbz3id"}},{"cell_type":"code","source":["from pyspark.ml.feature import StringIndexer, OneHotEncoder, VectorAssembler, StandardScaler\n","\n","# Indexer + OneHotEncoder cho khu_vuc\n","khu_vuc_idx = StringIndexer(inputCol=\"khu_vuc\", outputCol=\"khu_vuc_idx\")\n","df_indexed = khu_vuc_idx.fit(df_transformed).transform(df_transformed)\n","\n","khu_vuc_ohe = OneHotEncoder(inputCol=\"khu_vuc_idx\", outputCol=\"khu_vuc_vec\")\n","df_ohe = khu_vuc_ohe.fit(df_indexed).transform(df_indexed)\n","\n","print(df_ohe.columns)\n","df_ohe.select(\"khu_vuc\", \"khu_vuc_idx\", \"khu_vuc_vec\").show(5, truncate=False)\n","\n","\n","assembler_numeric = VectorAssembler(inputCols=[\"cap_bac_code\", \"kinh_nghiem_group\"], outputCol=\"numeric_features\")\n","df_numeric = assembler_numeric.transform(df_ohe)\n","scaler = StandardScaler(inputCol=\"numeric_features\", outputCol=\"numeric_scaled\")\n","scaler_model = scaler.fit(df_numeric)\n","\"\"\"\n","cap_bac_code\tkinh_nghiem_group\t  numeric_features\n","1\t             2\t                  [1.0, 2.0]\n","0\t             0\t                  [0.0, 0.0]\n","StandardScaler sẽ scale từng phần tử trong vector sao cho:\n","-Trung bình (mean) = 0\n","-Phương sai (variance) = 1\n","numeric_features\tnumeric_scaled\n","[1.0, 2.0]\t       [0.85, 1.28] (ví dụ)\n","[0.0, 0.0]\t        [0.0, 0.0]\n","\n","GIẢI THÍCH:\n","cap_bac_code có giá trị từ 1 → 9\n","kinh_nghiem_group có giá trị từ 0 → 4\n","numeric_features: Tạo vector đặc trưng từ số nguyên\n","numeric_scaled: Chuẩn hóa (z-score) để đưa vào mô hình\n","\n","\"\"\"\n","df_final = scaler_model.transform(df_numeric)\n","\n","nganh_ohe_cols = [\n","    c for c, dtype in df_final.dtypes\n","    if c.startswith('nganh_') and dtype in ('int', 'double', 'float')\n","]\n","\n","feature_cols = [\n","    'ky_nang_features',    # vector hóa văn bản\n","    'numeric_scaled',      # các số đã chuẩn hóa (từ cap_bac_code, kinh_nghiem_group)\n","    'khu_vuc_vec',         # one-hot khu vực\n","]\n","\n","assembler = VectorAssembler(inputCols=feature_cols, outputCol=\"all_features\")\n","df_with_features = assembler.transform(df_final)"],"metadata":{"id":"aTv2xy8W_pkb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# HUẤN LUYỆN\n"],"metadata":{"id":"uP13M4SD0rZn"}},{"cell_type":"markdown","source":["# CHUẨN BỊ NHÃN LABEL CỦA NGÀNH"],"metadata":{"id":"z24WwawnyZRQ"}},{"cell_type":"code","source":["from pyspark.sql.functions import col, element_at\n","from pyspark.ml.feature import StringIndexer\n","\n","# Giả sử cột đúng chính là 'nganh_nghe_chuan_hoa' - mảng chứa các ngành chuẩn hóa\n","# Lấy phần tử đầu tiên (index 1 vì element_at dùng 1-based index)\n","df_for_label = df_with_features.withColumn(\"label_raw\", element_at(col(\"nganh_nghe_chuan_hoa\"), 1))\n","\n","# Kiểm tra mẫu dữ liệu label_raw\n","df_for_label.select(\"label_raw\").show(10, truncate=False)\n","\n","# Khởi tạo StringIndexer\n","indexer = StringIndexer(inputCol=\"label_raw\", outputCol=\"label\")\n","\n","# Fit và transform, tránh gọi fit hai lần\n","indexer_model = indexer.fit(df_for_label) # fit() học ánh xạ từ chuỗi → số.\n","df_with_label = indexer_model.transform(df_for_label) #tạo cột label\n","\n","# Kiểm tra kết quả\n","df_with_label.select(\"label_raw\", \"label\").show(10, truncate=False)\n","print(df_with_label.columns)\n","\n","# Chia dữ liệu thành train/test 80/20\n","train_df, test_df = df_with_label.randomSplit([0.8, 0.2], seed=42)\n","\n","print(\"Số dòng train:\", train_df.count())\n","print(\"Số dòng test:\", test_df.count())\n"],"metadata":{"id":"_C1HUwwCEKQQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Mô hình LogisticRegression"],"metadata":{"id":"Jdns1y7Jkqpc"}},{"cell_type":"code","source":["from pyspark.ml.classification import LogisticRegression\n","\n","lr = LogisticRegression(featuresCol=\"all_features\", labelCol=\"label\")\n","model = lr.fit(train_df)  # df_label_indexed là DataFrame chứa cột 'label' và 'all_features'\n","#fit() sẽ học mối quan hệ giữa features và label, tìm trọng số tối ưu cho hàm logistic loss.\n","# Dự đoán\n","predictions = model.transform(test_df)\n","predictions.select(\n","    \"ten_cong_viec\",\n","    \"link\",\n","    \"label_raw\",\n","    \"label\",\n","    \"prediction\", #ngành nghề mô hình dự đoán (cũng là số).\n","    \"probability\" #Vector xác suất cho từng lớp (dự đoán lớp nào có xác suất cao nhất).\n",").show(10, truncate=False)"],"metadata":{"id":"uxE-94YukpD-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Hàm def trả 2 cột matching & predictions"],"metadata":{"id":"kx4SMjOppKI3"}},{"cell_type":"code","source":["from pyspark.sql.functions import udf\n","from pyspark.sql.types import DoubleType, StringType\n","# Lấy xác suất cao nhất trong vector xác suất\n","# Mỗi probability là một vector xác suất (độ tin cậy cho từng lớp ngành).\n","# Hàm này tìm xác suất cao nhất — tức là độ \"tự tin\" của mô hình với dự đoán.\n","\n","def max_prob(prob_vector):\n","    return float(prob_vector.toArray().max())\n","max_prob_udf = udf(max_prob, DoubleType())\n","\n","# Thêm cột matching_score thể hiện mức độ phù hợp giữa mô hình và công việc đó.\n","predictions = predictions.withColumn(\"mahtcing_score\", max_prob_udf(col(\"probability\")))\n","\n","# Chuyển chỉ số dự đoán thành label chữ\n","labels = indexer_model.labels\n","def pred_to_label(idx):\n","    return labels[int(idx)]\n","pred_to_label_udf = udf(pred_to_label, StringType())\n","\n","#Giúp hiển thị trực tiếp tên ngành đã được mô hình dự đoán với người dùng.\n","predictions = predictions.withColumn(\"predicted_label\", pred_to_label_udf(col(\"prediction\")))\n","\n","predictions.select(\n","    \"ten_cong_viec\", \"link\", \"predicted_label\", \"matching_score\"\n",").orderBy(col(\"matching_score\").desc()).show(10, truncate=False)"],"metadata":{"id":"RI5A_Xpbt1Fe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from pyspark.ml.evaluation import MulticlassClassificationEvaluator\n","\n","evaluator = MulticlassClassificationEvaluator(\n","    labelCol=\"label\", predictionCol=\"prediction\", metricName=\"accuracy\")\n","accuracy = evaluator.evaluate(predictions)\n","print(f\"Độ chính xác mô hình trên tập test: {accuracy:.4f}\")"],"metadata":{"id":"-hm7wTEhBhgN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Mô hình Random Forest Classifier"],"metadata":{"id":"dh6vF7A84fuK"}},{"cell_type":"code","source":["from pyspark.ml.classification import RandomForestClassifier\n","from pyspark.ml.evaluation import MulticlassClassificationEvaluator\n","from pyspark.sql.functions import udf, col\n","from pyspark.sql.types import DoubleType, StringType\n","\n","# Huấn luyện mô hình\n","rf = RandomForestClassifier(featuresCol=\"all_features\", labelCol=\"label\", numTrees=50)\n","model = rf.fit(train_df)\n","\n","# Dự đoán\n","predictions = model.transform(test_df)\n","\n","# Tính accuracy\n","evaluator = MulticlassClassificationEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"accuracy\")\n","accuracy = evaluator.evaluate(predictions)\n","print(f\"Độ chính xác mô hình Random Forest: {accuracy:.4f}\")\n","\n","# UDFs để xử lý hiển thị kết quả\n","labels = indexer_model.labels\n","#hàm lấy xác suất cao\n","max_prob_udf = udf(lambda prob: float(prob.toArray().max()) if prob is not None else 0.0, DoubleType())\n","#chuyển số sang label chữ\n","pred_to_label_udf = udf(lambda idx: labels[int(idx)] if idx is not None else None, StringType())\n","\n","# Tạo cột mới\n","#predictions: Chứa các cột như: features, label, prediction, probability, v.v.\n","predictions_with_scores = (\n","    predictions\n","    .withColumn(\"matching_score\", max_prob_udf(col(\"probability\")))\n","    .withColumn(\"predicted_label\", pred_to_label_udf(col(\"prediction\")))\n",")\n","\"\"\"\n","prediction\t    probability\t        matching_score\t      predicted_label\n","1\t           [0.2, 0.75, 0.05]\t        0.75\t                  \"Kinh doanh - Bán hàng\"\n","0\t           [0.85, 0.1, 0.05]\t        0.85\t                   \"Công nghệ thông tin\"\n","\n","\"\"\"\n","# Hiển thị top 10 kết quả\n","predictions_with_scores.select(\n","    \"ten_cong_viec\", \"link\", \"predicted_label\", \"matching_score\"\n",").orderBy(col(\"matching_score\").desc()).show(10, truncate=False)\n"],"metadata":{"id":"Elfrlqek39Gh"},"execution_count":null,"outputs":[]}]}